"""
Django settings for daily_groove project.

Generated by 'django-admin startproject' using Django 4.2.3.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

import os
from pathlib import Path

from dotenv import load_dotenv

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
print("base_dir", BASE_DIR)

load_dotenv(os.path.join(BASE_DIR.parent, ".env"))

ROOT_URL = os.getenv("ROOT_URL", "http://localhost:8000")

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv("SECRET_KEY")

env = os.getenv("DJANGO_ENV", "dev")

if env == "dev":
    DEBUG = True
elif env == "prod":
    DEBUG = False
else:
    raise ValueError("Invalid Django Environment")

ALLOWED_HOSTS = []

ALLOWED_HOSTS = os.environ.get("DJANGO_ALLOWED_HOSTS", "localhost").split(" ")

SECURE_HSTS_SECONDS = int(os.getenv("SECURE_HSTS_SECONDS", 60))

SESSION_COOKIE_SECURE = (
    True if os.getenv("SESSION_COOKIE_SECURE", "False") == "True" else False
)

CSRF_COOKIE_SECURE = (
    True if os.getenv("CSRF_COOKIE_SECURE", "False") == "True" else False
)

SECURE_SSL_REDIRECT = (
    True if os.getenv("SECURE_SSL_REDIRECT", "False") == "True" else False
)

SECURE_HSTS_PRELOAD = (
    True if os.getenv("SECURE_HSTS_PRELOAD", "False") == "True" else False
)

SECURE_HSTS_INCLUDE_SUBDOMAINS = (
    True if os.getenv("SECURE_HSTS_INCLUDE_SUBDOMAINS", "False") == "True" else False
)

# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "anymail",
    "core",
    "crispy_forms",
    "crispy_bootstrap4",
    "django_extensions",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "daily_groove.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": ["templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = os.getenv("WSGI_APPLICATION", "daily_groove.wsgi.application")


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

if env == "dev":
    print("USING LOCAL SQLITE TEST DB")
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": BASE_DIR / "db.sqlite3",
        }
    }
else:
    print(f'USING DB: {os.getenv("DB_SERVICE")}')
    DATABASES = {
        "default": {
            "ENGINE": os.getenv("DB_ENGINE"),
            "NAME": os.getenv("DB_NAME"),
            "USER": os.getenv("DB_USER"),
            "PASSWORD": os.getenv("DB_PASS"),
            "HOST": os.getenv("DB_SERVICE"),
            "PORT": int(os.getenv("DB_PORT", 3306)),
            "init_command": "SET sql_mode='STRICT_TRANS_TABLES,NO_ZERO_DATE,NO_ZERO_IN_DATE,ERROR_FOR_DIVISION_BY_ZERO';",
            "default-character-set": "utf8",
        }
    }


AUTH_USER_MODEL = "core.User"

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = "static/"
STATICFILES_DIRS = [os.path.join(BASE_DIR, "static")]


# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

LOGIN_REDIRECT_URL = "/"

CRISPY_TEMPLATE_PACK = "bootstrap4"

ENABLE_DEBUG_TOOLBAR = bool(os.getenv("ENABLE_DEBUG_TOOLBAR", "").lower() == "true")

if ENABLE_DEBUG_TOOLBAR:
    print("DEBUG TOOLBAR ENABLED")
    DEBUG_TOOLBAR_CONFIG = {
        "SHOW_TOOLBAR_CALLBACK": lambda _request: DEBUG,
    }
    MIDDLEWARE += ["debug_toolbar.middleware.DebugToolbarMiddleware"]
    INSTALLED_APPS += ("debug_toolbar",)

SHELL_PLUS_IMPORTS = [
    "from datetime import datetime",
    "from core.models.factories import *",
]


## Email Backend

EMAIL_BACKEND = "anymail.backends.mailjet.EmailBackend"
DEFAULT_FROM_EMAIL = (
    os.getenv("DEFAULT_FROM_EMAIL", "Daily Groove <noreply@dailygroove.us>"),
)

ANYMAIL = {
    "MAILJET_API_KEY": os.getenv("MAILJET_API_KEY", None),
    "MAILJET_SECRET_KEY": os.getenv("MAILJET_SECRET_KEY", None),
}
